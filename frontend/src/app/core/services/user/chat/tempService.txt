import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable, BehaviorSubject, interval, switchMap, of, Subject } from 'rxjs';
import { map, catchError, tap, takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { environment } from '../../../../environments/environment';
import { AuthService } from '../auth/auth.service';
import { SocketService } from '../socket/socket.service';

export type ChatSection = 'personal' | 'events';

export interface ChatUser {
  id: string;
  name: string;
  lastMessage: string;
  lastMessageTime: Date;
  lastSeenTime?: Date;
  isOnline: boolean;
  unreadCount: number;
  section: ChatSection;
  avatar?: string;
  chatId?: string;
  eventId?: string;
}

export interface ChatMessage {
  id: string;
  senderId: string;
  receiverId?: string;
  content: string;
  timestamp: Date;
  isRead: boolean;
  type: 'text' | 'image' | 'file';
  messageType?: 'text' | 'system' | 'image' | 'file';
}

export interface ApiChat {
  _id: string;
  participants: any[];
  messages: any[];
  chatType: 'personal' | 'event';
  eventId?: any;
  lastMessage?: any;
  createdAt: string;
  updatedAt: string;
  isActive: boolean;
}

export interface ApiMessage {
  _id: string;
  sender: any;
  content: string;
  timestamp: string;
  read: boolean;
  messageType: 'text' | 'system' | 'image' | 'file';
}

export interface SocketEventData {
  chatId: string;
  message: ChatMessage;
  chatType?: 'personal' | 'event';
}

export interface UserStatusData {
  userId: string;
  status: string;
  lastSeen?: Date;
}

export interface MessagesReadData {
  chatId: string;
  userId: string;
  timestamp: Date;
}

export interface TypingData {
  userId: string;
  chatId: string;
}

@Injectable({
  providedIn: 'root'
})
export class ChatService {
  private readonly apiUrl = environment.apiUrl;
  private currentUserId: string = "";
  private isInitialized = false;
  private destroy$ = new Subject<void>();
  private typingUsers = new Map<string, Set<string>>(); // chatId -> Set of userIds typing
  private pollingEnabled = false;

  // Subjects for reactive state management
  private chatUsersSubject = new BehaviorSubject<ChatUser[]>([]);
  public chatUsers$ = this.chatUsersSubject.asObservable();

  private messagesSubject = new BehaviorSubject<ChatMessage[]>([]);
  public messages$ = this.messagesSubject.asObservable();

  private unreadCountSubject = new BehaviorSubject<number>(0);
  public unreadCount$ = this.unreadCountSubject.asObservable();

  private isTypingSubject = new BehaviorSubject<boolean>(false);
  public isTyping$ = this.isTypingSubject.asObservable();

  private connectionStatusSubject = new BehaviorSubject<boolean>(false);
  public connectionStatus$ = this.connectionStatusSubject.asObservable();

  private errorSubject = new BehaviorSubject<string>('');
  public error$ = this.errorSubject.asObservable();

  constructor(
    private http: HttpClient,
    private authService: AuthService
  ) {
    this.fetchUser();
  }

  /**
   * Initialize the chat service with socket connection
   */
  async initialize(socketService: SocketService): Promise<void> {
    if (this.isInitialized && this.socketService === socketService) {
      return Promise.resolve();
    }

    try {
      // Clean up previous initialization
      if (this.isInitialized) {
        this.cleanup();
      }

      this.socketService = socketService;
      this.setupSocketListeners();
      this.startConditionalPolling();
      this.isInitialized = true;
      
      // Initial data load
      this.refreshChats();
      // this.refreshUnreadCount().subscribe();

    } catch (error) {
      this.handleError('Failed to initialize chat service', error);
      throw error;
    }
  }

  /**
   * Cleanup resources and subscriptions
   */
  cleanup(): void {
    this.destroy$.next();
    this.destroy$.complete();
    this.destroy$ = new Subject<void>();
    this.isInitialized = false;
    this.pollingEnabled = false;
    this.typingUsers.clear();
  }

  /**
   * Get current user information
   */
  private fetchUser(): void {
    this.authService.checkAuthStatus()
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          if (response.isAuthenticated && response.user?._id) {
            this.currentUserId = response.user._id;
          }
        },
        error: (error) => this.handleError('Failed to fetch user', error)
      });
  }

  /**
   * Setup socket event listeners
   */
  private setupSocketListeners(): void {
    if (!this.socketService) return;

    // Connection status
    this.socketService.connectionStatus$
      .pipe(takeUntil(this.destroy$))
      .subscribe(connected => {
        this.connectionStatusSubject.next(connected);
        this.pollingEnabled = !connected;
        
        if (connected) {
          this.clearError();
          // Refresh data when reconnected
          this.refreshChats();
        }
      });

    // New message events
    this.socketService.listenSafe<SocketEventData>('newMessage')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleNewMessage(data));

    // User status updates
    this.socketService.listenSafe<UserStatusData>('userStatus')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleUserStatusUpdate(data));

    // Message read status
    this.socketService.listenSafe<MessagesReadData>('messagesRead')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleMessagesRead(data));

    // Typing indicators
    this.socketService.listenSafe<TypingData>('userTyping')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleUserTyping(data));

    this.socketService.listenSafe<TypingData>('userStoppedTyping')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleUserStoppedTyping(data));

    // User online/offline events
    this.socketService.listenSafe<{ userId: string }>('userOnline')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleUserOnline(data));

    this.socketService.listenSafe<{ userId: string }>('userOffline')
      .pipe(takeUntil(this.destroy$))
      .subscribe(data => this.handleUserOffline(data));
  }

  /**
   * Handle new message events
   */
  private handleNewMessage(data: SocketEventData): void {
    const { chatId, message, chatType } = data;
    
    // Update messages list
    const currentMessages = this.messagesSubject.getValue();
    const messageExists = currentMessages.some(msg => msg.id === message.id);
    
    if (!messageExists) {
      const updatedMessages = [...currentMessages, message].sort(
        (a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()
      );
      this.messagesSubject.next(updatedMessages);
    }

    // Refresh chat list to update last message
    this.refreshChats();
    
    // Update unread count if message is from another user
    if (message.senderId !== this.currentUserId) {
      this.refreshUnreadCount().subscribe();
    }
  }

  /**
   * Handle user status updates
   */
  private handleUserStatusUpdate(data: UserStatusData): void {
    const { userId, status, lastSeen } = data;
    const currentUsers = this.chatUsersSubject.getValue();
    
    const updatedUsers = currentUsers.map(user => {
      if (user.id === userId) {
        return { 
          ...user, 
          isOnline: status === 'online', 
          lastSeenTime: lastSeen 
        };
      }
      return user;
    });
    
    this.chatUsersSubject.next(updatedUsers);
  }

  /**
   * Handle message read status updates
   */
  private handleMessagesRead(data: MessagesReadData): void {
    const { chatId, userId, timestamp } = data;
    const currentMessages = this.messagesSubject.getValue();
    
    const updatedMessages = currentMessages.map(message => {
      if (message.senderId === this.currentUserId && 
          message.timestamp <= timestamp && 
          !message.isRead) {
        return { ...message, isRead: true };
      }
      return message;
    });
    
    this.messagesSubject.next(updatedMessages);
  }

  /**
   * Handle typing indicator events
   */
  private handleUserTyping(data: TypingData): void {
    const { userId, chatId } = data;
    
    if (userId === this.currentUserId) return;
    
    if (!this.typingUsers.has(chatId)) {
      this.typingUsers.set(chatId, new Set());
    }
    
    this.typingUsers.get(chatId)!.add(userId);
    this.updateTypingStatus(chatId);
  }

  /**
   * Handle stop typing events
   */
  private handleUserStoppedTyping(data: TypingData): void {
    const { userId, chatId } = data;
    
    if (userId === this.currentUserId) return;
    
    const typingSet = this.typingUsers.get(chatId);
    if (typingSet) {
      typingSet.delete(userId);
      this.updateTypingStatus(chatId);
    }
  }

  /**
   * Update typing status for current chat
   */
  private updateTypingStatus(chatId: string): void {
    const typingSet = this.typingUsers.get(chatId);
    const isTyping = typingSet ? typingSet.size > 0 : false;
    this.isTypingSubject.next(isTyping);
  }

  /**
   * Handle user online events
   */
  private handleUserOnline(data: { userId: string }): void {
    this.updateUserOnlineStatus(data.userId, true);
  }

  /**
   * Handle user offline events
   */
  private handleUserOffline(data: { userId: string }): void {
    this.updateUserOnlineStatus(data.userId, false);
  }

  /**
   * Update user online status
   */
  private updateUserOnlineStatus(userId: string, isOnline: boolean): void {
    const currentUsers = this.chatUsersSubject.getValue();
    const updatedUsers = currentUsers.map(user => {
      if (user.id === userId) {
        return { ...user, isOnline };
      }
      return user;
    });
    this.chatUsersSubject.next(updatedUsers);
  }

  /**
   * Start conditional polling (only when socket is disconnected)
   */
  private startConditionalPolling(): void {
    interval(5000)
      .pipe(
        takeUntil(this.destroy$),
        switchMap(() => {
          if (this.pollingEnabled || !this.checkSocketConnection()) {
            return this.refreshUnreadCount();
          }
          return of(0);
        })
      )
      .subscribe({
        error: (error) => this.handleError('Polling error', error)
      });
  }

  /**
   * Get all user chats
   */
  getUserChats(): Observable<ChatUser[]> {
    return this.http.get<any>(`${this.apiUrl}user/chats`).pipe(
      map(response => {
        const chatUsers = this.transformChatsToUsers(response.data || []);
        this.chatUsersSubject.next(chatUsers);
        return chatUsers;
      }),
      catchError(error => {
        this.handleError('Failed to fetch user chats', error);
        return of([]);
      })
    );
  }

  /**
   * Get users by section (personal or events)
   */
  getUsersBySection(section: ChatSection): Observable<ChatUser[]> {
    return this.getUserChats().pipe(
      map(users => users
        .filter(user => user.section === section)
        .sort((a, b) => new Date(b.lastMessageTime).getTime() - new Date(a.lastMessageTime).getTime())
      )
    );
  }

  /**
   * Transform API chats to ChatUser format
   */
  private transformChatsToUsers(chats: ApiChat[]): ChatUser[] {
    return chats.map(chat => {
      const isEventChat = chat.chatType === 'event';
      let name = '';
      let isOnline = false;

      if (isEventChat && chat.eventId) {
        name = chat.eventId.title || 'Event Chat';
        isOnline = true; // Event chats are always "online"
      } else {
        // For personal chats, find the other participant
        const otherParticipant = chat.participants.find(p => p._id !== this.currentUserId);
        name = otherParticipant ? 
          (otherParticipant.username || otherParticipant.email || 'Unknown User') : 
          'Unknown User';
        isOnline = otherParticipant?.isOnline || false;
      }

      const lastMessage = chat.lastMessage?.content || 'No messages yet';
      const lastMessageTime = chat.lastMessage?.timestamp ? 
        new Date(chat.lastMessage.timestamp) : 
        new Date(chat.updatedAt);

      // Calculate unread count
      const unreadCount = chat.messages?.filter(msg =>
        msg.sender?._id !== this.currentUserId && !msg.read
      ).length || 0;

      return {
        id: chat._id,
        name,
        lastMessage,
        lastMessageTime,
        isOnline,
        unreadCount,
        section: isEventChat ? 'events' : 'personal',
        chatId: chat._id,
        eventId: chat.eventId?._id
      };
    });
  }

  /**
   * Get messages for a specific chat
   */
  getChatMessages(chatId: string, limit: number = 50, skip: number = 0): Observable<ChatMessage[]> {
    const params = new HttpParams()
      .set('limit', limit.toString())
      .set('skip', skip.toString());

    return this.http.get<any>(`${this.apiUrl}user/chats/${chatId}/messages`, { params }).pipe(
      map(response => {
        const messages = this.transformApiMessages(response.data || []);
        this.messagesSubject.next(messages);
        return messages;
      }),
      catchError(error => {
        this.handleError('Failed to fetch chat messages', error);
        return of([]);
      })
    );
  }

  /**
   * Transform API messages to ChatMessage format
   */
  private transformApiMessages(apiMessages: ApiMessage[]): ChatMessage[] {
    return apiMessages
      .map(msg => ({
        id: msg._id,
        senderId: msg.sender?._id || '',
        content: msg.content || '',
        timestamp: new Date(msg.timestamp),
        isRead: msg.read || false,
        type: (msg.messageType as 'text' | 'image' | 'file') || 'text',
        messageType: msg.messageType || 'text'
      }))
      .sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
  }

  /**
   * Send message using Socket.IO with fallback
   */
  sendMessage(chatId: string, content: string): Observable<ChatMessage> {
    return new Observable<ChatMessage>(subscriber => {
      if (!content.trim()) {
        subscriber.error(new Error('Message content cannot be empty'));
        return;
      }

      // Create optimistic message
      const tempMessage: ChatMessage = {
        id: 'temp-' + Date.now() + '-' + Math.random(),
        senderId: this.currentUserId,
        content: content.trim(),
        timestamp: new Date(),
        isRead: false,
        type: 'text',
        messageType: 'text'
      };

      // Add to local messages immediately
      const currentMessages = this.messagesSubject.getValue();
      this.messagesSubject.next([...currentMessages, tempMessage]);

      if (this.checkSocketConnection()) {
        // Send via socket
        this.socketService!.emitSafe('sendMessage', { chatId, content: content.trim() });

        // Listen for confirmation
        const subscription = this.socketService!.listenSafe<SocketEventData>('newMessage')
          .pipe(
            takeUntil(this.destroy$),
            debounceTime(100) // Prevent duplicate processing
          )
          .subscribe(data => {
            if (data.chatId === chatId && 
                data.message.senderId === this.currentUserId &&
                Math.abs(new Date(data.message.timestamp).getTime() - tempMessage.timestamp.getTime()) < 5000) {
              
              // Replace temp message with real message
              const finalMessages = this.messagesSubject.getValue().map(msg => 
                msg.id === tempMessage.id ? data.message : msg
              );
              this.messagesSubject.next(finalMessages);
              
              subscriber.next(data.message);
              subscriber.complete();
              subscription.unsubscribe();
            }
          });

        // Timeout handling
        setTimeout(() => {
          if (!subscriber.closed) {
            subscription.unsubscribe();
            // Try HTTP fallback
            this.sendMessageHttp(chatId, content.trim()).subscribe({
              next: (message) => {
                const finalMessages = this.messagesSubject.getValue().map(msg => 
                  msg.id === tempMessage.id ? message : msg
                );
                this.messagesSubject.next(finalMessages);
                subscriber.next(message);
                subscriber.complete();
              },
              error: (error) => {
                // Remove temp message on error
                const finalMessages = this.messagesSubject.getValue().filter(msg => 
                  msg.id !== tempMessage.id
                );
                this.messagesSubject.next(finalMessages);
                subscriber.error(error);
              }
            });
          }
        }, 5000);

      } else {
        // Fallback to HTTP
        this.sendMessageHttp(chatId, content.trim()).subscribe({
          next: (message) => {
            const finalMessages = this.messagesSubject.getValue().map(msg => 
              msg.id === tempMessage.id ? message : msg
            );
            this.messagesSubject.next(finalMessages);
            subscriber.next(message);
            subscriber.complete();
          },
          error: (error) => {
            // Remove temp message on error
            const finalMessages = this.messagesSubject.getValue().filter(msg => 
              msg.id !== tempMessage.id
            );
            this.messagesSubject.next(finalMessages);
            subscriber.error(error);
          }
        });
      }
    });
  }

  /**
   * Send message via HTTP as fallback
   */
  private sendMessageHttp(chatId: string, content: string): Observable<ChatMessage> {
    return this.http.post<any>(`${this.apiUrl}user/chats/${chatId}/messages`, {
      content,
      messageType: 'text'
    }).pipe(
      map(response => this.transformApiMessages([response.data])[0]),
      catchError(error => {
        this.handleError('Failed to send message', error);
        throw error;
      })
    );
  }

  /**
   * Create personal chat
   */
  createPersonalChat(otherUserId: string): Observable<ApiChat> {
    return this.http.post<any>(`${this.apiUrl}user/chats/personal`, {
      participants: [this.currentUserId, otherUserId]
    }).pipe(
      map(response => response.data),
      tap(() => this.refreshChats()),
      catchError(error => {
        this.handleError('Failed to create personal chat', error);
        throw error;
      })
    );
  }

  /**
   * Get chat between users
   */
  getChatBetweenUsers(otherUserId: string): Observable<ApiChat | null> {
    return this.http.get<any>(`${this.apiUrl}user/chats/personal/user/${otherUserId}`).pipe(
      map(response => response.data),
      catchError(error => {
        if (error.status === 404) {
          return of(null);
        }
        this.handleError('Failed to get chat between users', error);
        throw error;
      })
    );
  }

  /**
   * Join event chat
   */
  joinEventChat(eventId: string): Observable<any> {
    return this.http.post(`${this.apiUrl}events/${eventId}/join`, {}).pipe(
      tap(() => {
        if (this.checkSocketConnection()) {
          this.socketService!.emitSafe('joinEventChat', { eventId });
        }
        this.refreshChats();
      }),
      catchError(error => {
        this.handleError('Failed to join event chat', error);
        throw error;
      })
    );
  }

  /**
   * Leave event chat
   */
  leaveEventChat(eventId: string): Observable<void> {
    return this.http.post<any>(`${this.apiUrl}user/chats/event/${eventId}/leave`, {}).pipe(
      map(() => void 0),
      tap(() => this.refreshChats()),
      catchError(error => {
        this.handleError('Failed to leave event chat', error);
        throw error;
      })
    );
  }

  /**
   * Mark messages as read
   */
  markMessagesAsRead(chatId: string): Observable<void> {
    if (this.checkSocketConnection()) {
      this.socketService!.emitSafe('markAsRead', { chatId });
    }
    
    // Also make HTTP call as backup
    return this.http.put<any>(`${this.apiUrl}user/chats/${chatId}/read`, {}).pipe(
      map(() => void 0),
      tap(() => this.refreshUnreadCount().subscribe()),
      catchError(error => {
        this.handleError('Failed to mark messages as read', error);
        return of(void 0);
      })
    );
  }

  /**
   * Get unread message count
   */
  getUnreadMessageCount(): Observable<number> {
    return this.http.get<any>(`${this.apiUrl}user/chats/unread/count`).pipe(
      map(response => {
        const count = response.data?.count || 0;
        this.unreadCountSubject.next(count);
        return count;
      }),
      catchError(error => {
        this.handleError('Failed to get unread count', error);
        return of(0);
      })
    );
  }

  /**
   * Delete chat
   */
  deleteChat(chatId: string): Observable<void> {
    return this.http.delete<any>(`${this.apiUrl}user/chats/${chatId}`).pipe(
      map(() => void 0),
      tap(() => this.refreshChats()),
      catchError(error => {
        this.handleError('Failed to delete chat', error);
        throw error;
      })
    );
  }

  /**
   * Emit typing indicator
   */
  emitTyping(chatId: string): void {
    if (this.checkSocketConnection()) {
      this.socketService!.emitSafe('typing', { chatId });
    }
  }

  /**
   * Emit stop typing indicator
   */
  emitStopTyping(chatId: string): void {
    if (this.checkSocketConnection()) {
      this.socketService!.emitSafe('stopTyping', { chatId });
    }
  }

  /**
   * Refresh chats manually
   */
  refreshChats(): void {
    this.getUserChats().subscribe({
      error: (error) => this.handleError('Failed to refresh chats', error)
    });
  }

  /**
   * Refresh unread count
   */
  private refreshUnreadCount(): Observable<number> {
    return this.getUnreadMessageCount();
  }

  /**
   * Check socket connection
   */
  private checkSocketConnection(): boolean {
    return this.socketService?.isConnected() || false;
  }

  /**
   * Handle errors consistently
   */
  private handleError(message: string, error: any): void {
    console.error(message, error);
    this.errorSubject.next(message);
  }

  /**
   * Clear error
   */
  private clearError(): void {
    this.errorSubject.next('');
  }

  // Getters and setters
  getCurrentUserId(): string {
    return this.currentUserId;
  }

  setCurrentUserId(userId: string): void {
    this.currentUserId = userId;
  }

  getIsInitialized(): boolean {
    return this.isInitialized;
  }

  // Legacy method for backward compatibility
  getMessagesForUser(userId: string): Observable<ChatMessage[]> {
    return this.getChatMessages(userId);
  }

  // Socket service reference (private)
  private socketService?: SocketService;
}