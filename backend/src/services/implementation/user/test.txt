  //   private async getWalletBalance(userId: string): Promise<number> {
  //     // Fetch user's wallet balance from a wallet service/repository
  //     return 1500; // Example balance
  //   }
  // private async deductFromWallet(userId: string, amount: number): Promise<void> {
  //   // Deduct amount from user's wallet
  //   console.log(`Deducted â‚¹${amount} from wallet of user ${userId}`);
  // }
  // private async updateCouponUsage(couponCode: string): Promise<void> {
  //   // Update coupon usage count in a coupon repository
  //   console.log(`Updated usage for coupon ${couponCode}`);
  // }


    // async processWalletPayment(
  //   eventId: string,
  //   tickets: { [type: string]: number },
  //   amount: number,
  //   userId: string,
  //   couponCode: string | null,
  //   discount: number
  // ): Promise<void> {
  //   try {
  //     // Input validation
  //     if (!eventId || !userId) throw new Error('Event ID and User ID are required');
  //     if (!Object.keys(tickets).length) throw new Error('At least one ticket is required');
  //     if (amount <= 0) throw new Error('Amount must be positive');

  //     // Check wallet balance (assume a method exists to fetch this)
  //     const walletBalance = await this.getWalletBalance(userId); // Placeholder method
  //     if (walletBalance < amount) throw new Error('Insufficient wallet balance');

  //     // Prepare ticket details
  //     const ticketDetails = await this.prepareTicketDetails(eventId, tickets);

  //     // Save booking with completed status
  //     const booking = await this.bookingRepository.create({
  //       bookingId: `BK${Date.now()}${Math.floor(Math.random() * 1000)}`,
  //       userId,
  //       eventId,
  //       tickets: ticketDetails,
  //       totalAmount: amount,
  //       paymentType: 'wallet',
  //       discount,
  //       coupon: couponCode,
  //     });

  //     // Deduct amount from wallet (assume a method exists)
  //     await this.deductFromWallet(userId, amount); // Placeholder method

  //     // Optionally update coupon usage
  //     if (couponCode) await this.updateCouponUsage(couponCode); // Placeholder method
  //   } catch (error) {
  //     throw new Error(`Wallet payment failed: ${(error as Error).message}`);
  //   }
  // }